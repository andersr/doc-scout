generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Project {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique
  name      String
  createdAt DateTime?
  updatedAt DateTime?

  collectionName String?

  sources Source[]
  members ProjectUser[]
  apiKeys Key[]
}

model Key {
  id        String   @id @default(cuid(2))
  secret    String
  createdAt DateTime

  name String?

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int?
}

model ProjectUser {
  id   Int  @id @default(autoincrement())
  role Role @default(USER)

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

enum Role {
  ADMIN
  USER
}

model Source {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique
  createdAt DateTime?
  updatedAt DateTime?

  name        String?
  url         String?
  storagePath String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
}

model User {
  id       Int    @id @default(autoincrement())
  publicId String @unique

  // TODO: remove
  clerkId String? @unique

  // role      Role      @default(USER)
  email     String    @unique
  name      String?
  createdAt DateTime?
  lastLogin DateTime?

  projectMemberships ProjectUser[]
}

// src: epic-stack
model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  /// Use for sender/receiver handshake
  // hash String?

  // UNUSED
  email String?

  // UNUSED
  inviteId String?

  @@unique([target, type])
}
