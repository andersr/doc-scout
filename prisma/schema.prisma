generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Collection {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique
  createdAt DateTime?
  updatedAt DateTime?
  name      String
  sources   Source[]

  projectCollections ProjectCollection[]

  collectionChats CollectionChat[]

  chat   Chat? @relation(fields: [chatId], references: [id])
  chatId Int?
}

model CollectionChat {
  id Int @id @default(autoincrement())

  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId Int?

  chat   Chat? @relation(fields: [chatId], references: [id])
  chatId Int?
}

model Chat {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique
  createdAt DateTime
  updatedAt DateTime?
  messages  Message[]
  // threadId  String

  chatCollections CollectionChat[]

  collections Collection[]
}

model Message {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  createdAt DateTime

  author   User? @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int?

  text String
  type MessageType @default(USER)
}

enum MessageType {
  USER
  BOT
}

model Key {
  id        String   @id @default(cuid(2))
  secret    String
  createdAt DateTime

  name String?

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int?
}

model Project {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique
  name      String
  // make required
  createdAt DateTime?
  updatedAt DateTime?

  // legacy?
  // make required
  collectionName String?

  // legacy?
  sources Source[]

  collections ProjectCollection[]

  members ProjectUser[]
  apiKeys Key[]
}

model ProjectCollection {
  id   Int  @id @default(autoincrement())
  role Role @default(USER)

  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?

  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId Int?
}

model ProjectUser {
  id   Int  @id @default(autoincrement())
  role Role @default(USER)

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

enum Role {
  ADMIN
  USER
}

model Source {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique
  createdAt DateTime?
  updatedAt DateTime?

  name        String?
  url         String?
  storagePath String?
  text        String?

  // legacy
  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?

  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId Int?
}

model User {
  id       Int    @id @default(autoincrement())
  publicId String @unique

  // clerkId String @unique

  stytchId String @unique

  // role      Role      @default(USER)
  // email     String    @unique
  // name      String?
  // createdAt DateTime?
  // lastLogin DateTime?

  projectMemberships ProjectUser[]
  messages           Message[]
}
