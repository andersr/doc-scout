name: ‚úÖ App checks
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  NODE_VERSION: 22

jobs:
  unit_testing:
    name: üß™ Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: ${{ env.NODE_VERSION }}

      - name: üì• Install deps
        run: npm install

      - name: üß™ Unit Test
        run: npm run test
  lint:
    name: üßπ Linting
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: ${{ env.NODE_VERSION }}

      - name: üì• Install deps
        run: npm install

      - name: üßπ Lint
        run: npm run lint

  typecheck:
    name: üîé Type Checks
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: ${{ env.NODE_VERSION }}

      - name: üì• Install deps
        run: npm install

      - name: üîé Type check
        run: npm run typecheck

  formatting:
    name: üíÑ Formatting
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: ‚éî Setup node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: ${{ env.NODE_VERSION }}

      - name: üì• Install deps
        run: npm install

      - name: üíÑ Formatting Check
        run: npm run format:check

  test:
    name: üî¨ E2E Testing
    timeout-minutes: 60
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub PostgreSQL image
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    env:
      ALLOWED_USERS: "any"
      ADOBE_PDF_SERVICES_CLIENT_ID: "foo"
      ADOBE_PDF_SERVICES_CLIENT_SECRET: "foo"
      AUTH_SESSION_SECRET: ${{ secrets.AUTH_SESSION_SECRET }}
      AWS_DATA_BUCKET_NAME: "foo"
      AWS_REGION: "foo"
      AWS_S3_ACCESS_KEY: "foo"
      AWS_S3_SECRET: "foo"
      CDN_HOST: ${{ secrets.CDN_HOST }}
      FIRECRAWL_API_KEY: "foo"
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
      PINECONE_HOST: ${{ secrets.PINECONE_HOST }}
      PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME }}
      STYTCH_PROJECT_ID: ${{ secrets.STYTCH_PROJECT_ID }}
      STYTCH_SECRET: ${{ secrets.STYTCH_SECRET }}
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
      DIRECT_URL: postgresql://postgres:postgres@localhost:5432/postgres
      E2E_ENV: true
      TEST_USER_PWD: ${{ secrets.TEST_USER_PWD }}
      PORT: 8080

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: ${{ env.NODE_VERSION }}

      - name: üì• Install deps
        run: npm ci

      - name: üõ† Setup Database
        run: npx prisma migrate reset --force

      - name: ‚öôÔ∏è Build
        run: npm run build

      - name: üì• Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
